const fs = require("node:fs");
const fsPromises = fs.promises;
const PNG = require("pngjs").PNG;
const path = require("path");
const yauzl = require("yauzl-promise");
const { pipeline } = require("stream/promises");

async function unzip(zipFilePath, outputDir) {
  try {
    // console.log(`Ensuring output directory exists: ${outputDir}`);
    await fs.promises.mkdir(outputDir, { recursive: true });

    const zipfile = await yauzl.open(zipFilePath, {
      validateFilenames: false,
      supportMacArchive: false,
    });

    for await (const entry of zipfile) {
      // console.log("Processing entry:" + entry.filename);
      const entryPath = path.join(outputDir, entry.filename);

      if (entry.filename.endsWith("/")) {
        // console.log(`Creating directory: ${entryPath}`);
        await fs.promises.mkdir(entryPath, { recursive: true });
        continue;
      }

      // console.log(`Creating file: ${entryPath}`);

      await fs.promises.mkdir(path.dirname(entryPath), { recursive: true });

      try {
        // console.log(`Attempting to open read stream for ${entry.filename}`);
        const readStream = await entry.openReadStream({ decompress: true });
        // console.log(`Opened read stream for ${entry.filename}`);

        const writeStream = fs.createWriteStream(entryPath);
        await pipeline(readStream, writeStream);
        // console.log(`Written successfully: ${entryPath}`);
      } catch (err) {
        // console.log(`Error writing ${entryPath}:`, err);
        continue;
      }
    }

    console.log("Extraction operation complete");
    await zipfile.close();
  } catch (error) {
    console.log("An error occurred during extraction:", error);
  }
}

// Function to read the directory and filter valid PNG files
async function readDir(directoryPath) {
  try {
    const files = await fs.promises.readdir(directoryPath, {
      withFileTypes: true,
    });
    const pngFiles = [];

    for (const file of files) {
      if (file.isFile() && path.extname(file.name).toLowerCase() === ".png") {
        const filePath = path.join(directoryPath, file.name);

        const fileHandle = await fs.promises.open(filePath, "r");
        const buffer = Buffer.alloc(8);
        await fileHandle.read(buffer, 0, 8, 0);
        await fileHandle.close();

        if (
          buffer.equals(
            Buffer.from([0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a])
          )
        ) {
          pngFiles.push(filePath);
        }
      }
    }

    console.log(`Filtered PNG files: ${pngFiles.length}`);
    return pngFiles;
  } catch (error) {
    console.log(`Error reading directory ${directoryPath}:`, error);
    throw error;
  }
}

// Function to parse a single PNG file and extract pixel data
async function parsePngFileAsync(filePath) {
  return new Promise((resolve, reject) => {
    fs.createReadStream(filePath)
      .pipe(new PNG())
      .on("parsed", function () {
        const pixels = [];
        for (let y = 0; y < this.height; y++) {
          for (let x = 0; x < this.width; x++) {
            const idx = (y * this.width + x) * 4;
            const r = this.data[idx];
            const g = this.data[idx + 1];
            const b = this.data[idx + 2];
            const a = this.data[idx + 3];
            pixels.push({ r, g, b, a });
          }
        }
        resolve({ filePath, pixels });
      })
      .on("error", (err) => {
        console.error(`Error parsing PNG file ${filePath}:`, err);
        reject(err);
      });
  });
}

// Function to parse an array of PNG file paths
async function parsePngFiles(pngFilePaths) {
  try {
    const pixelDataArray = [];
    for (const filePath of pngFilePaths) {
      const pixelData = await parsePngFileAsync(filePath);
      pixelDataArray.push(pixelData);
    }
    return pixelDataArray;
  } catch (error) {
    console.error("Error parsing PNG files:", error);
    throw error;
  }
}

// Main execution block
(async () => {
  const zipFilePath =
    "C:\\Users\\downi\\OneDrive\\Desktop\\FSWD\\Term 1\\Comp1320 (Java)\\Class 11\\Lab 11\\startingcode\\myfile.zip";
  const outputDir =
    "C:\\Users\\downi\\OneDrive\\Desktop\\FSWD\\Term 1\\Comp1320 (Java)\\Class 11\\Lab 11\\startingcode\\unzipped";
  await unzip(zipFilePath, outputDir);
  const pngFiles = await readDir(outputDir);
  const pixelDataArray = await parsePngFiles(pngFiles);

  for (const file of pixelDataArray) {
    console.log(`File: ${file.filePath}`);
    console.log("First 10 pixels:", file.pixels.slice(0, 10)); // Display only the first 10 pixels
  }
})();

// /**
//  * Description: Read in png file by given pathIn,
//  * convert to grayscale and write to given pathOut
//  *
//  * @param {string} filePath
//  * @param {string} pathProcessed
//  * @return {promise}
//  */
// const grayScale = (pathIn, pathOut) => {};

// module.exports = {
//   unzip,
//   readDir,
//   grayScale,
// };
